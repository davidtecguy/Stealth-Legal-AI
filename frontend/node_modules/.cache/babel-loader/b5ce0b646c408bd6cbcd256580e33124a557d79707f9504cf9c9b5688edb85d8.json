{"ast":null,"code":"import _objectSpread from\"/home/magic/Work/Workspace/Stealth_Legal-AI/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_BASE_URL='http://localhost:8000';class ApiService{constructor(){this.baseUrl=API_BASE_URL;}async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=\"\".concat(this.baseUrl).concat(endpoint);const response=await fetch(url,_objectSpread({headers:_objectSpread({'Content-Type':'application/json'},options.headers)},options));if(!response.ok){const error=await response.json().catch(()=>({error:'Unknown error'}));throw new Error(error.error||\"HTTP error! status: \".concat(response.status));}if(response.status===204){return{};// No content\n}return response.json();}// Document CRUD operations\nasync createDocument(document){return this.request('/documents',{method:'POST',body:JSON.stringify(document)});}async getDocuments(){let skip=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;return this.request(\"/documents?skip=\".concat(skip,\"&limit=\").concat(limit));}async getDocument(id){return this.request(\"/documents/\".concat(id));}async updateDocument(id,changes,etag){const headers={};if(etag){headers['If-Match']=etag;}return this.request(\"/documents/\".concat(id),{method:'PATCH',body:JSON.stringify(changes),headers});}async deleteDocument(id){return this.request(\"/documents/\".concat(id),{method:'DELETE'});}// Search operations\nasync searchDocuments(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;return this.request(\"/documents/search?q=\".concat(encodeURIComponent(query),\"&limit=\").concat(limit,\"&offset=\").concat(offset));}async searchDocument(id,query){let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;let offset=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;return this.request(\"/documents/\".concat(id,\"/search?q=\").concat(encodeURIComponent(query),\"&limit=\").concat(limit,\"&offset=\").concat(offset));}// Health check\nasync healthCheck(){return this.request('/health');}// LLM Legal AI Methods\nasync analyzeDocumentLLM(documentId){const response=await fetch(\"\".concat(this.baseUrl,\"/documents/\").concat(documentId,\"/analyze\"),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"LLM Analysis failed: \".concat(response.statusText));}return response.json();}async improveDocumentLLM(documentId,improvementType,specificFocus){const request={document_id:documentId,improvement_type:improvementType,specific_focus:specificFocus};const response=await fetch(\"\".concat(this.baseUrl,\"/documents/\").concat(documentId,\"/improve\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){throw new Error(\"Document improvement failed: \".concat(response.statusText));}return response.json();}async semanticSearch(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const response=await fetch(\"\".concat(this.baseUrl,\"/documents/semantic-search?q=\").concat(encodeURIComponent(query),\"&limit=\").concat(limit,\"&offset=\").concat(offset));if(!response.ok){throw new Error(\"Semantic search failed: \".concat(response.statusText));}return response.json();}async classifyDocumentLLM(documentId){const response=await fetch(\"\".concat(this.baseUrl,\"/documents/\").concat(documentId,\"/classify\"));if(!response.ok){throw new Error(\"Document classification failed: \".concat(response.statusText));}return response.json();}async extractLegalTermsLLM(documentId){const response=await fetch(\"\".concat(this.baseUrl,\"/documents/\").concat(documentId,\"/extract-terms\"));if(!response.ok){throw new Error(\"Legal term extraction failed: \".concat(response.statusText));}return response.json();}async getLLMStatus(){const response=await fetch(\"\".concat(this.baseUrl,\"/llm/status\"));if(!response.ok){throw new Error(\"LLM status check failed: \".concat(response.statusText));}return response.json();}}export const apiService=new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseUrl","request","endpoint","options","arguments","length","undefined","url","concat","response","fetch","_objectSpread","headers","ok","error","json","catch","Error","status","createDocument","document","method","body","JSON","stringify","getDocuments","skip","limit","getDocument","id","updateDocument","changes","etag","deleteDocument","searchDocuments","query","offset","encodeURIComponent","searchDocument","healthCheck","analyzeDocumentLLM","documentId","statusText","improveDocumentLLM","improvementType","specificFocus","document_id","improvement_type","specific_focus","semanticSearch","classifyDocumentLLM","extractLegalTermsLLM","getLLMStatus","apiService"],"sources":["/home/magic/Work/Workspace/Stealth_Legal-AI/frontend/src/services/api.ts"],"sourcesContent":["import { \n  Document, \n  DocumentCreate, \n  DocumentChanges, \n  SearchResponse,\n  LLMAnalysisResponse,\n  DocumentImprovementRequest,\n  DocumentImprovementResponse,\n  SemanticSearchResponse,\n  DocumentClassification,\n  LegalTerm,\n  LLMStatus\n} from '../types';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nclass ApiService {\n  private baseUrl = API_BASE_URL;\n\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ error: 'Unknown error' }));\n      throw new Error(error.error || `HTTP error! status: ${response.status}`);\n    }\n\n    if (response.status === 204) {\n      return {} as T; // No content\n    }\n\n    return response.json();\n  }\n\n  // Document CRUD operations\n  async createDocument(document: DocumentCreate): Promise<Document> {\n    return this.request<Document>('/documents', {\n      method: 'POST',\n      body: JSON.stringify(document),\n    });\n  }\n\n  async getDocuments(skip = 0, limit = 100): Promise<Document[]> {\n    return this.request<Document[]>(`/documents?skip=${skip}&limit=${limit}`);\n  }\n\n  async getDocument(id: number): Promise<Document> {\n    return this.request<Document>(`/documents/${id}`);\n  }\n\n  async updateDocument(id: number, changes: DocumentChanges, etag?: string): Promise<Document> {\n    const headers: Record<string, string> = {};\n    if (etag) {\n      headers['If-Match'] = etag;\n    }\n\n    return this.request<Document>(`/documents/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify(changes),\n      headers,\n    });\n  }\n\n  async deleteDocument(id: number): Promise<void> {\n    return this.request<void>(`/documents/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Search operations\n  async searchDocuments(query: string, limit = 10, offset = 0): Promise<SearchResponse> {\n    return this.request<SearchResponse>(\n      `/documents/search?q=${encodeURIComponent(query)}&limit=${limit}&offset=${offset}`\n    );\n  }\n\n  async searchDocument(id: number, query: string, limit = 10, offset = 0): Promise<SearchResponse> {\n    return this.request<SearchResponse>(\n      `/documents/${id}/search?q=${encodeURIComponent(query)}&limit=${limit}&offset=${offset}`\n    );\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; service: string }> {\n    return this.request<{ status: string; service: string }>('/health');\n  }\n\n  // LLM Legal AI Methods\n  async analyzeDocumentLLM(documentId: number): Promise<LLMAnalysisResponse> {\n    const response = await fetch(`${this.baseUrl}/documents/${documentId}/analyze`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`LLM Analysis failed: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async improveDocumentLLM(documentId: number, improvementType: string, specificFocus?: string): Promise<DocumentImprovementResponse> {\n    const request: DocumentImprovementRequest = {\n      document_id: documentId,\n      improvement_type: improvementType,\n      specific_focus: specificFocus\n    };\n\n    const response = await fetch(`${this.baseUrl}/documents/${documentId}/improve`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(request)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Document improvement failed: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async semanticSearch(query: string, limit: number = 10, offset: number = 0): Promise<SemanticSearchResponse> {\n    const response = await fetch(`${this.baseUrl}/documents/semantic-search?q=${encodeURIComponent(query)}&limit=${limit}&offset=${offset}`);\n    \n    if (!response.ok) {\n      throw new Error(`Semantic search failed: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async classifyDocumentLLM(documentId: number): Promise<DocumentClassification> {\n    const response = await fetch(`${this.baseUrl}/documents/${documentId}/classify`);\n    \n    if (!response.ok) {\n      throw new Error(`Document classification failed: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async extractLegalTermsLLM(documentId: number): Promise<LegalTerm[]> {\n    const response = await fetch(`${this.baseUrl}/documents/${documentId}/extract-terms`);\n    \n    if (!response.ok) {\n      throw new Error(`Legal term extraction failed: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async getLLMStatus(): Promise<LLMStatus> {\n    const response = await fetch(`${this.baseUrl}/llm/status`);\n    \n    if (!response.ok) {\n      throw new Error(`LLM status check failed: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}